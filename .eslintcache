[{"F:\\Interview\\google-calculator\\src\\App.js":"1","F:\\Interview\\google-calculator\\src\\components\\KeyPadComponent.js":"2","F:\\Interview\\google-calculator\\src\\context\\historyContext.js":"3","F:\\Interview\\google-calculator\\src\\reportWebVitals.js":"4","F:\\Interview\\google-calculator\\src\\index.js":"5","F:\\Interview\\google-calculator\\src\\components\\ResultComponent.js":"6"},{"size":4484,"mtime":1606387908054,"results":"7","hashOfConfig":"8"},{"size":2514,"mtime":1606185026617,"results":"9","hashOfConfig":"8"},{"size":119,"mtime":1606162886070,"results":"10","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"8"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"8"},{"size":1591,"mtime":1606384600617,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"1o4y2nw",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\Interview\\google-calculator\\src\\App.js",["30"],"import React, { useState} from 'react';\r\nimport './App.css';\r\nimport DisplayResult from './components/ResultComponent';\r\nimport KeyPad from \"./components/KeyPadComponent\";\r\nimport historyContext from './context/historyContext'\r\n\r\nconst App = () => {\r\n\r\n    \r\n    const [result,setResult] = useState(\"\")\r\n    let [prev, setPrev] = useState(\"\")\r\n    const [history,setHistory] = useState([])\r\n    const [ac, setAc] = useState(false)\r\n    const [statbar,setStatbar] = useState(\"Ans = 0\")\r\n\r\n\r\n    const op_arr = ['%','/','*','-','=','+']\r\n\r\n    const onClick = (button) => {\r\n\r\n        if(history.length > 0){\r\n            let temp = history[history.length-1]\r\n            let key = Object.keys(temp)\r\n            key = key[0]\r\n            setStatbar(\"Ans = \" + temp[key])\r\n            }\r\n\r\n\r\n        if(button === \"AC\"){\r\n            reset()\r\n            setAc(false)\r\n        } else if(prev === \"=\" && !op_arr.includes(button) ){\r\n            setResult(button)\r\n            setPrev(button)\r\n            setAc(false)\r\n        } else if(button === \"=\"){\r\n            if(result === \"Error\"){\r\n             } else {\r\n                console.log(\"=\")\r\n                calculate()\r\n                setAc(true)\r\n             }\r\n        } else  if(button === \"CE\"){\r\n            backspace()\r\n        } else if(op_arr.includes(button) && (prev === button)){\r\n            console.log(\"Error op_arr.includes(button) && (prev === button)\")\r\n        } else if(op_arr.includes(button) && op_arr.includes(prev)){\r\n            console.log(\"Error op_arr.includes(button) && op_arr.includes(prev)\")\r\n            if(prev === \"%\" && op_arr.includes(button)){\r\n                console.log(\"Error prev === % && op_arr.includes(button)\")\r\n                setResult(result+button)\r\n                setPrev(button)\r\n            } else  if(prev === \"=\"){\r\n                if(history.length>0)\r\n                {\r\n                let temp = history[history.length-1]\r\n                let key = Object.keys(temp)\r\n                key = key[0]\r\n            // console.log(button, prev,result)\r\n            if(temp[key] === result){\r\n                console.log(\"temp[key] === result\")\r\n                setResult(result+button)\r\n                setPrev(button)\r\n                setAc(false)\r\n            }}\r\n            } else {\r\n                setResult(result.slice(0,-1)+button)\r\n                setPrev(button)\r\n            }\r\n        } else if (prev === \"Error\"){\r\n            setResult(button)\r\n            setPrev(button)\r\n        } else if(result === \"Error\"){\r\n            setResult(button)\r\n            setPrev(button)\r\n        \r\n        }else {\r\n            setResult(result+button)\r\n            setPrev(button)\r\n        }\r\n        \r\n    };\r\n\r\n    const calculate = () => {\r\n        // console.log(\"Calculate\")\r\n        var checkResult = ''\r\n        checkResult = result\r\n        let checkResult_mod = checkResult.replace('%','*(1/100)')\r\n\r\n        try {\r\n\r\n            let temp1 = (eval(checkResult_mod)).toString()\r\n            setStatbar(checkResult)\r\n            setResult(temp1)\r\n            setPrev(\"=\")\r\n            let obj = {}\r\n            obj[checkResult] = temp1\r\n            setHistory([...history,obj])\r\n\r\n        } catch (e) {\r\n            console.log(\"Catch Error\")\r\n            setResult(\"Error\")\r\n            setPrev(\"Error\")\r\n            let obj = {}\r\n            obj[checkResult] = \"Error\"\r\n            setHistory([...history,obj])\r\n\r\n        }\r\n    };\r\n\r\n    const reset = () => {\r\n        setResult(\"\")\r\n    };\r\n\r\n    const backspace = () => {\r\n\r\n        // console.log(typeof(result))\r\n        if (result === (\"Error\") || result === \"Infinity\" ){\r\n            console.log(\"\")\r\n            setResult(\"\")\r\n        } else {\r\n            let temp = result.slice(0,-1)\r\n            temp = temp[temp.length-1]\r\n        setResult(result.slice(0, -1))\r\n        setPrev(temp)\r\n        }\r\n    };\r\n\r\n    \r\n        return (\r\n            <historyContext.Provider value={{statbar,setResult,setPrev,setAc}}>\r\n                <div className=\"calculator-body\">\r\n                    <h1>Google Calculator</h1>\r\n                    <DisplayResult \r\n                    onClick={onClick} \r\n                    result={result} \r\n                    history={history}\r\n                    />\r\n                    <KeyPad\r\n                    ac = {ac} \r\n                    onClick={onClick}/>\r\n                </div>\r\n            </historyContext.Provider>\r\n        );\r\n    \r\n}\r\n\r\nexport default App;\r\n","F:\\Interview\\google-calculator\\src\\components\\KeyPadComponent.js",[],["31","32"],"F:\\Interview\\google-calculator\\src\\context\\historyContext.js",["33"],"import React, {createContext} from 'react'\r\n\r\nconst historyContext = createContext()\r\n\r\nexport default historyContext ;","F:\\Interview\\google-calculator\\src\\reportWebVitals.js",[],"F:\\Interview\\google-calculator\\src\\index.js",[],["34","35"],"F:\\Interview\\google-calculator\\src\\components\\ResultComponent.js",[],{"ruleId":"36","severity":1,"message":"37","line":92,"column":26,"nodeType":"38","messageId":"39","endLine":92,"endColumn":30},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":1,"column":8,"nodeType":"46","messageId":"47","endLine":1,"endColumn":13},{"ruleId":"40","replacedBy":"48"},{"ruleId":"42","replacedBy":"49"},"no-eval","eval can be harmful.","CallExpression","unexpected","no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar",["50"],["51"],"no-global-assign","no-unsafe-negation"]